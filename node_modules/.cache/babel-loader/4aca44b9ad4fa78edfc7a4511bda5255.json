{"ast":null,"code":"var _jsxFileName = \"/Users/christopher/Desktop/Thinkful/Projects/React/Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport ControlBtns from \"./controlBtns\";\nimport Duration from \"../pomodoro/timer\";\nimport Sessions from \"./sessions\";\nimport { minutesToDuration } from \"../utils/duration/index\";\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return { ...prevState,\n    timeRemaining,\n    percentComplete: elapsedSeconds / prevState.timeTotal * 100\n  };\n}\n\nfunction nextSession(focusDuration, breakDuration) {\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (session.timeRemaining === 0) {\n      // new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n      new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function decreaseFocus() {\n    setFocusDuration(prevState => Math.max(FOCUS_MIN, prevState - FOCUS_STEP));\n  }\n\n  function increaseFocus() {\n    setFocusDuration(prevState => Math.min(FOCUS_MAX, prevState + FOCUS_STEP));\n  }\n\n  function decreaseBreak() {\n    setBreakDuration(prevState => Math.max(BREAK_MIN, prevState - BREAK_STEP));\n  }\n\n  function increaseBreak() {\n    setBreakDuration(prevState => Math.min(BREAK_MAX, prevState + BREAK_STEP));\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    label: `Focus Duration: ${minutesToDuration(focusDuration)}`,\n    onIncrease: increaseFocus,\n    onDecrease: decreaseFocus,\n    testid: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    label: `Break Duration: ${minutesToDuration(breakDuration)}`,\n    onIncrease: increaseBreak,\n    onDecrease: decreaseBreak,\n    testid: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ControlBtns, {\n    onPlayPause: playPause,\n    isPlaying: isTimerRunning,\n    onStop: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Sessions, {\n    session: session,\n    isPause: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/christopher/Desktop/Thinkful/Projects/React/Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","ControlBtns","Duration","Sessions","minutesToDuration","BREAK_MAX","BREAK_MIN","BREAK_STEP","FOCUS_MAX","FOCUS_MIN","FOCUS_STEP","nextTick","prevState","timeRemaining","Math","max","elapsedSeconds","timeTotal","percentComplete","nextSession","focusDuration","breakDuration","currentSession","label","duration","Pomodoro","isTimerRunning","setIsTimerRunning","setFocusDuration","setBreakDuration","session","setSession","Audio","play","playPause","nextState","prevStateSession","decreaseFocus","increaseFocus","min","decreaseBreak","increaseBreak","stopSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport ControlBtns from \"./controlBtns\";\nimport Duration from \"../pomodoro/timer\";\nimport Sessions from \"./sessions\";\nimport { minutesToDuration } from \"../utils/duration/index\";\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return {\n    ...prevState,\n    timeRemaining,\n    percentComplete: (elapsedSeconds / prevState.timeTotal) * 100,\n  };\n}\nfunction nextSession(focusDuration, breakDuration) {\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if (session.timeRemaining === 0) {\n        // new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n        new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession((prevStateSession) => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              timeRemaining: focusDuration * 60,\n              percentComplete: 0,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  function decreaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.max(FOCUS_MIN, prevState - FOCUS_STEP)\n    );\n  }\n  function increaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.min(FOCUS_MAX, prevState + FOCUS_STEP)\n    );\n  }\n  function decreaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.max(BREAK_MIN, prevState - BREAK_STEP)\n    );\n  }\n  function increaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.min(BREAK_MAX, prevState + BREAK_STEP)\n    );\n  }\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Duration\n            label={`Focus Duration: ${minutesToDuration(focusDuration)}`}\n            onIncrease={increaseFocus}\n            onDecrease={decreaseFocus}\n            testid=\"focus\"\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <Duration\n              label={`Break Duration: ${minutesToDuration(breakDuration)}`}\n              onIncrease={increaseBreak}\n              onDecrease={decreaseBreak}\n              testid=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ControlBtns\n            onPlayPause={playPause}\n            isPlaying={isTimerRunning}\n            onStop={stopSession}\n          />\n        </div>\n      </div>\n      <Sessions session={session} isPause={!isTimerRunning} />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}